plugins {
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id "org.sonarqube" version "2.6.2"
}
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'

group = 'guru.springframework'
version = '0.0.1-SNAPSHOT'

description = """Spring Boot Web Application"""

repositories { 
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE'
    compile 'org.webjars:bootstrap:3.3.4'
    compile 'org.webjars:jquery:2.1.4'
    compile 'com.h2database:h2:1.4.196'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.0.0.RELEASE'
}
bootRun {
    main = 'guru.springframework.SpringBootWebApplication'
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

pmd {
   ignoreFailures = true
    pmdTest.enabled=true
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

findbugs{
    ignoreFailures=true
    findbugsTest.enabled=true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Pmd){
    reports{
        xml.enabled=false
        html.enabled=true
    }
}
